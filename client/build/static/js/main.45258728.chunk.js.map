{"version":3,"sources":["components/layout/landing.jpg","actions/types.ts","utils/axiosConfig.ts","reducers/auth.ts","actions/alert.ts","actions/auth.ts","actions/blogPost.ts","reducers/alert.ts","reducers/blogPost.ts","reducers/index.ts","store.tsx","components/forms/Register.tsx","components/forms/Login.tsx","components/layout/Navbar.tsx","components/profile/UserStats.tsx","components/profile/UserInfo.tsx","components/profile/RecentPost.tsx","components/profile/Profile.tsx","components/alert/Alerts.tsx","components/posts/PostsMenu.tsx","components/posts/PostItem.tsx","components/posts/Posts.tsx","components/forms/NewPostForm.tsx","components/post/CreateCommentForm.tsx","components/post/CommentItem.tsx","components/post/PostContent.tsx","components/post/Post.tsx","components/forms/EditPostForm.tsx","components/routes/PrivateRoute.tsx","components/layout/Landing.tsx","components/post/EditCommentForm.tsx","components/forms/EditBioForm.tsx","App.tsx","index.tsx"],"names":["module","exports","AuthActionTypes","AlertActionTypes","BlogPostActionTypes","setAuthToken","token","axios","defaults","headers","common","initialState","isAuthenticated","localStorage","getItem","user","loading","setAlert","alert","timer","dispatch","newAlert","msg","type","id","v4","payload","setTimeout","removeAlert","getUser","showAlert","a","get","res","data","console","log","message","errors","response","forEach","error","getBlogPostById","postId","getBLogPostById","removeBlogPost","delete","removePost","initalState","posts","post","content","datePosted","postComments","title","username","combineReducers","auth","state","action","register","login","setItem","accessToken","logout","blogPost","searchBlogPost","getAllPosts","addComment","removeComment","filter","comment","middleware","thunk","connect","registerUser","userData","config","useState","firstName","lastName","password","bio","formData","setFormData","history","useHistory","useEffect","push","onChange","e","currentTarget","name","value","className","onSubmit","preventDefault","placeholder","loginUser","logoutUser","loggedInButtons","onClick","guestButtons","to","loggedInMenu","dropdownMenu","role","aria-label","aria-expanded","data-target","aria-hidden","UserStats","dateRegistered","numberOfPosts","UserInfo","pathname","RecentPost","renderRecentPosts","blogPostsFromUser","slice","map","key","width","length","alerts","displayAlerts","PostsMenu","PostItem","href","getBlogPostWithQuery","query","search","getAllBlogPosts","submitSearch","setSubmitSearch","undefined","searchQuery","setSearchQuery","renderBlogPostList","createPost","newPostData","createComment","createCommentDto","CommentItem","currUser","renderLoggedIn","PostContent","commentId","match","params","renderComments","updateBlogPost","updatePostDto","patch","updatePost","compoment","path","exact","component","Landing","src","require","alt","editComment","editCommentDto","location","editBio","editBioDto","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Register","Login","Posts","Post","Profile","NewPostForm","EditPostForm","EditCommentForm","EditBioForm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45258728.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landing.6dd9cb77.jpg\";","// Auth Types\nexport enum AuthActionTypes {\n  register = 'REGISTER USER',\n  login = 'LOGIN USER',\n  logout = 'LOGOUT USER',\n  getUser = 'GET USER',\n  editBio = 'EDIT BIO',\n}\n\n// Alert Types\nexport enum AlertActionTypes {\n  setAlert = 'SET ALERT',\n  removeAlert = 'REMOVE_ALERT',\n}\n\n// BlogPost Types\nexport enum BlogPostActionTypes {\n  createPost = 'CREATE_POST',\n  updatePost = 'UPDATE_POST',\n  searchBlogPost = 'SEARCH_BLOGPOST',\n  getBLogPostById = 'GET_BLOGPOST_BY_ID',\n  getAllPosts = 'GET_ALL_POSTS',\n  getCurrUserPost = 'GET_CURR_USER_POST',\n  removePost = 'REMOVE_POST',\n\n  addComment = 'ADD_COMMENT',\n  editComment = 'EDIT_COMMENT',\n  removeComment = 'REMOVE_COMMENT',\n}\n","import axios from 'axios';\n\nexport const setAuthToken = (token: string) => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n","import { AuthActionTypes } from '../actions/types';\nimport { AuthAction } from '../actions';\nimport { setAuthToken } from '../utils/axiosConfig';\nimport { BlogPost } from './blogPost';\n\n//---------------------------------------------------------------------\n// AUTH STATE\nexport interface User {\n  username: string;\n  firstName: string;\n  lastName: string;\n  bio: string;\n  blogPostsFromUser: BlogPost[];\n  dateRegistered: string;\n}\n\nexport interface AuthState {\n  isAuthenticated: boolean;\n  token: string | null;\n  user: User | null;\n  loading: boolean;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  token: localStorage.getItem('token'),\n  user: null,\n  loading: true,\n};\n\n//---------------------------------------------------------------------\n// REDUCER\nexport const auth = (state: AuthState = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case AuthActionTypes.register:\n    case AuthActionTypes.login:\n      localStorage.setItem('token', action.payload.accessToken);\n\n      // Set global authorization token for axios\n      setAuthToken(localStorage.token);\n      return {\n        ...state,\n        isAuthenticated: true,\n        token: localStorage.getItem('token'),\n        loading: false,\n      };\n\n    case AuthActionTypes.getUser:\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload,\n        loading: false,\n      };\n\n    case AuthActionTypes.logout:\n      localStorage.setItem('token', '');\n\n      // Set global authorization token for axios\n      setAuthToken(localStorage.token);\n      return {\n        ...state,\n        isAuthenticated: false,\n        token: null,\n        user: null,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n","//---------------------------------------------------------------------\n// INTERFACES\n\nimport { AlertActionTypes } from './types';\nimport { AlertType, Alert } from '../reducers/alert';\nimport { v4 } from 'uuid';\nimport { Dispatch } from 'react';\n\nexport interface SetAlertDto {\n  msg: string;\n  type: AlertType;\n}\n\ninterface SetAlertAction {\n  type: AlertActionTypes.setAlert;\n  payload: Alert;\n}\n\ninterface RemoveAlertAction {\n  type: AlertActionTypes.removeAlert;\n  payload: string;\n}\n\n//---------------------------------------------------------------------\n// ACTION CREATORS\n\nexport const setAlert = (alert: SetAlertDto, timer: number = 5000) => (\n  dispatch: Dispatch<any>\n) => {\n  const { msg, type } = alert;\n  const newAlert: Alert = {\n    msg,\n    type,\n    id: v4(),\n  };\n\n  dispatch({\n    type: AlertActionTypes.setAlert,\n    payload: newAlert,\n  });\n\n  setTimeout(() => {\n    dispatch(removeAlert(newAlert.id));\n  }, timer);\n};\n\nconst removeAlert = (id: string) => ({\n  type: AlertActionTypes.removeAlert,\n  payload: id,\n});\n\nexport type AlertAction = SetAlertAction | RemoveAlertAction;\n","import axios from 'axios';\nimport { AuthActionTypes } from './types';\nimport { Dispatch } from 'react';\nimport { setAlert } from './alert';\nimport { BlogPost } from '../reducers/blogPost';\n\n//---------------------------------------------------------------------\n// INTERFACES\n\n// Data Transfer Objects\nexport interface CreateUserDto {\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  bio: string;\n}\n\nexport interface GetUserDto {\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  bio: string;\n  blogPostsFromUser: BlogPost[];\n  dateRegistered: string;\n}\n\nexport interface LoginUserDto {\n  username: string;\n  password: string;\n}\n\nexport interface EditBioDto {\n  bio: string;\n}\n\nexport interface Token {\n  accessToken: string;\n}\n\n//  Action Types\nexport interface RegisterUserAction {\n  type: AuthActionTypes.register;\n  payload: Token;\n}\n\nexport interface LoginUserAction {\n  type: AuthActionTypes.login;\n  payload: Token;\n}\n\nexport interface EditBioAction {\n  type: AuthActionTypes.editBio;\n}\n\nexport interface LogoutUserAction {\n  type: AuthActionTypes.logout;\n}\n\nexport interface GetUserAction {\n  type: AuthActionTypes.getUser;\n  payload: GetUserDto;\n}\n\nexport type AuthAction =\n  | RegisterUserAction\n  | LoginUserAction\n  | LogoutUserAction\n  | GetUserAction\n  | EditBioAction;\n\n//---------------------------------------------------------------------\n// ACTION CREATORS\n\nexport const editBio = (editBioDto: EditBioDto) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    await axios.patch('/auth/editbio', editBioDto, config);\n\n    dispatch({ type: AuthActionTypes.editBio });\n    dispatch(setAlert({ msg: 'Bio edited', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const registerUser = (userData: CreateUserDto) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post('/auth/register', userData, config);\n\n    dispatch({\n      type: AuthActionTypes.register,\n      payload: res.data,\n    });\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const loginUser = (userData: LoginUserDto) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post('/auth/login', userData, config);\n\n    dispatch({\n      type: AuthActionTypes.login,\n      payload: res.data,\n    });\n\n    dispatch(setAlert({ msg: 'Login Successful', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const logoutUser = () => ({\n  type: AuthActionTypes.logout,\n});\n\nexport const getUser = (showAlert: boolean = true) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const res = await axios.get('/auth');\n\n    dispatch({\n      type: AuthActionTypes.getUser,\n      payload: res.data,\n    });\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (showAlert) {\n      if (errors) {\n        errors.forEach((error) =>\n          dispatch(setAlert({ msg: error, type: 'danger' }))\n        );\n      }\n    }\n  }\n};\n\n//---------------------------------------------------------------------\n// Utility Functions\n","import axios, { AxiosResponse } from 'axios';\nimport { BlogPostActionTypes } from './types';\nimport { Dispatch } from 'react';\nimport { setAlert } from './alert';\nimport { BlogPost, PostComment } from '../reducers/blogPost';\n\n//---------------------------------------------------------------------\n// INTERFACES\n\n// Data Transfer Objects\nexport interface CreatePostDto {\n  title: string;\n  content: string;\n}\n\nexport interface UpdatePostDto {\n  title?: string;\n  content?: string;\n}\n\nexport interface CreateCommentDto {\n  content: string;\n}\nexport interface EditPostCommentDto {\n  content: string;\n}\n\nexport interface GetPostQuery {\n  search?: string;\n  postId?: number;\n}\n\n// Action Types\nexport interface BlogPostSearchAction {\n  type: BlogPostActionTypes.searchBlogPost;\n  payload: BlogPost[];\n}\n\nexport interface GetAllBlogPostsAction {\n  type: BlogPostActionTypes.getAllPosts;\n  payload: BlogPost[];\n}\n\nexport interface GetBlogPostByIdAciton {\n  type: BlogPostActionTypes.getBLogPostById;\n  payload: BlogPost;\n}\n\nexport interface RemoveBlogPostAction {\n  type: BlogPostActionTypes.removePost;\n  payload: Number;\n}\n\nexport interface UpdateBlogPostAction {\n  type: BlogPostActionTypes.updatePost;\n}\n\nexport interface AddCommentAction {\n  type: BlogPostActionTypes.addComment;\n  payload: PostComment[];\n}\n\nexport interface EditCommentAction {\n  type: BlogPostActionTypes.editComment;\n}\n\nexport interface RemoveCommentAciton {\n  type: BlogPostActionTypes.removeComment;\n  payload: number;\n}\n\nexport type BlogPostAction =\n  | UpdateBlogPostAction\n  | GetAllBlogPostsAction\n  | BlogPostSearchAction\n  | GetBlogPostByIdAciton\n  | RemoveBlogPostAction\n  | AddCommentAction\n  | EditCommentAction\n  | RemoveCommentAciton;\n\n//---------------------------------------------------------------------\n// ACTION CREATORS\n\n// Comment Actions\nexport const removeComment = (commentId: number) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    await axios.delete(`/comment/${commentId}`);\n\n    dispatch({ type: BlogPostActionTypes.removeComment, payload: commentId });\n    dispatch(setAlert({ msg: 'Comment Removed', type: 'warning' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const editComment = (\n  editCommentDto: EditPostCommentDto,\n  postId: number,\n  commentId: number\n) => async (dispatch: Dispatch<any>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    await axios.patch(\n      `/comment/${postId}/${commentId}`,\n      editCommentDto,\n      config\n    );\n\n    dispatch({ type: BlogPostActionTypes.editComment });\n\n    dispatch(setAlert({ msg: 'Comment Edited', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const createComment = (\n  createCommentDto: CreateCommentDto,\n  postId: number\n) => async (dispatch: Dispatch<any>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post(\n      `/comment/${postId}`,\n      createCommentDto,\n      config\n    );\n\n    console.log(res.data);\n\n    dispatch({\n      type: BlogPostActionTypes.addComment,\n      payload: res.data,\n    });\n\n    dispatch(setAlert({ msg: 'Comment added', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\n// BlogPost Actions\nexport const updateBlogPost = (\n  updatePostDto: UpdatePostDto,\n  postId: string\n) => async (dispatch: Dispatch<any>) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    await axios.patch(`/blogpost/${postId}`, updatePostDto, config);\n\n    dispatch({\n      type: BlogPostActionTypes.updatePost,\n    });\n\n    dispatch(setAlert({ msg: 'Post Updated', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const getBlogPostById = (postId: string) => async (\n  dispatch: Dispatch<any>\n) => {\n  // Get a single post that matches the postId\n  if (postId) {\n    const res = await axios.get(`/blogpost/${postId}`);\n\n    dispatch({\n      type: BlogPostActionTypes.getBLogPostById,\n      payload: res.data,\n    });\n\n    return;\n  }\n};\n\n// Gets all blogposts including the comments\nexport const getAllBlogPosts = () => async (dispatch: Dispatch<any>) => {\n  try {\n    // Get all blogPosts\n    const res = await axios.get('/blogpost/all');\n\n    dispatch({\n      type: BlogPostActionTypes.getAllPosts,\n      payload: res.data,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getBlogPostWithQuery = (query: GetPostQuery) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const { search } = query;\n\n    let res: AxiosResponse;\n\n    // Get all posts that meet the search criteria\n    if (search) {\n      res = await axios.get(`/blogpost?search=${search}`);\n\n      dispatch({\n        type: BlogPostActionTypes.searchBlogPost,\n        payload: res.data,\n      });\n\n      return;\n    }\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const createPost = (newPostData: CreatePostDto, history: any) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    await axios.post('/blogpost', newPostData, config);\n\n    dispatch(setAlert({ msg: 'Post Created', type: 'success' }));\n\n    history.push('/');\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n\nexport const removeBlogPost = (postId: number) => async (\n  dispatch: Dispatch<any>\n) => {\n  try {\n    await axios.delete(`/blogpost/${postId}`);\n\n    dispatch({\n      type: BlogPostActionTypes.removePost,\n      payload: postId,\n    });\n\n    dispatch(setAlert({ msg: 'Post was removed', type: 'success' }));\n  } catch (error) {\n    console.log(error.message);\n\n    const errors: string[] = error.response.data.message;\n\n    if (errors) {\n      errors.forEach((error) =>\n        dispatch(setAlert({ msg: error, type: 'danger' }))\n      );\n    }\n  }\n};\n","//---------------------------------------------------------------------\n\nimport { AlertAction, AlertActionTypes } from '../actions';\n\n// ALERT STATE\nexport type AlertType = 'danger' | 'warning' | 'success';\n\nexport interface Alert {\n  msg: string;\n  type: AlertType;\n  id: string;\n}\n\nconst initalState: Alert[] = [];\n\n//---------------------------------------------------------------------\n// ALERT REDUCER\nexport const alert = (state: Alert[] = initalState, action: AlertAction) => {\n  switch (action.type) {\n    case AlertActionTypes.setAlert:\n      return [...state, action.payload];\n\n    case AlertActionTypes.removeAlert:\n      return state.filter((alert) => alert.id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n","//---------------------------------------------------------------------\n\nimport { BlogPostAction, BlogPostActionTypes } from '../actions';\n\n// BLOGPOST STATE\nexport interface BlogPost {\n  id: number;\n  username: string;\n  title: string;\n  content: string;\n  datePosted: string;\n  postComments: PostComment[];\n}\n\nexport interface PostComment {\n  id: number;\n  content: string;\n  username: string;\n}\n\nexport interface BlogPostState {\n  posts: BlogPost[];\n  post: BlogPost;\n  loading: boolean;\n}\n\nconst initalState: BlogPostState = {\n  posts: [],\n  post: {\n    content: '',\n    datePosted: '',\n    id: 0,\n    postComments: [],\n    title: '',\n    username: '',\n  },\n  loading: true,\n};\n\n//---------------------------------------------------------------------\n// BLOGPOST REDUCER\nexport const blogPost = (\n  state: BlogPostState = initalState,\n  action: BlogPostAction\n) => {\n  switch (action.type) {\n    case BlogPostActionTypes.searchBlogPost:\n    case BlogPostActionTypes.getAllPosts:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false,\n      };\n\n    case BlogPostActionTypes.getBLogPostById:\n      return {\n        ...state,\n        post: action.payload,\n        loading: false,\n      };\n\n    case BlogPostActionTypes.addComment:\n      return {\n        ...state,\n        post: { ...state.post, postComments: action.payload },\n        loading: false,\n      };\n\n    case BlogPostActionTypes.removeComment:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          postComments: state.post.postComments.filter(\n            (comment) => comment.id !== action.payload\n          ),\n        },\n      };\n\n    case BlogPostActionTypes.removePost:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { auth } from './auth';\nimport { alert } from './alert';\nimport { blogPost } from './blogPost';\nimport { AppState } from '../store';\n\nexport default combineReducers<AppState>({\n  auth,\n  blogPost,\n  alert,\n});\n","import { createStore, applyMiddleware, Middleware, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { AuthState } from './reducers/auth';\nimport { Alert } from './reducers/alert';\nimport { BlogPostState } from './reducers/blogPost';\n\nexport interface AppState {\n  alert: Alert[];\n  auth: AuthState;\n  blogPost: BlogPostState;\n}\n\nconst middleware: Middleware[] = [thunk];\n\nexport function configureStore(): Store<AppState> {\n  const store = createStore(\n    rootReducer,\n    undefined,\n    composeWithDevTools(applyMiddleware(...middleware))\n  );\n  return store;\n}\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { registerUser, CreateUserDto } from '../../actions/auth';\nimport './Register.scss';\nimport { useHistory } from 'react-router-dom';\nimport { AppState } from '../../store';\nimport { AuthState } from '../../reducers/auth';\n\ninterface RegisterUserProps {\n  auth: AuthState;\n  registerUser: (registerForm: CreateUserDto) => void;\n}\n\nconst Register = ({\n  registerUser,\n  auth: { isAuthenticated },\n}: RegisterUserProps) => {\n  const [formData, setFormData] = useState<CreateUserDto>({\n    firstName: '',\n    lastName: '',\n    username: '',\n    password: '',\n    bio: '',\n  });\n\n  const { firstName, lastName, username, password, bio } = formData;\n  let history = useHistory();\n  useEffect(() => {\n    if (isAuthenticated) {\n      history.push('/');\n    }\n  }, [history, isAuthenticated]);\n\n  const onChange = (\n    e: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>\n  ) =>\n    setFormData({\n      ...formData,\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    registerUser(formData);\n  };\n\n  return (\n    <Fragment>\n      <form\n        className=\"container register-container\"\n        onSubmit={(e) => onSubmit(e)}\n      >\n        <div className=\"field\">\n          <label className=\"label\">First Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"firstName\"\n              value={firstName}\n              type=\"text\"\n              placeholder=\"First Name\"\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">Last Name</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"lastName\"\n              value={lastName}\n              type=\"text\"\n              placeholder=\"Last Name\"\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">Username</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"username\"\n              value={username}\n              type=\"text\"\n              placeholder=\"Username\"\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">Password</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"password\"\n              value={password}\n              type=\"password\"\n              placeholder=\"Enter a password\"\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">Bio</label>\n          <div className=\"control\">\n            <textarea\n              className=\"textarea is-info\"\n              onChange={(e) => onChange(e)}\n              name=\"bio\"\n              value={bio}\n              placeholder=\"Write about yourself\"\n            ></textarea>\n          </div>\n        </div>\n\n        <button className=\"button is-success\">Register</button>\n      </form>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { registerUser })(Register);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { loginUser, LoginUserDto } from '../../actions/auth';\nimport './Login.scss';\nimport { useHistory } from 'react-router-dom';\nimport { AppState } from '../../store';\nimport { AuthState } from '../../reducers/auth';\n\ninterface LoginUserProps {\n  auth: AuthState;\n  loginUser: (loginForm: LoginUserDto) => void;\n}\n\nconst Login = ({ loginUser, auth: { isAuthenticated } }: LoginUserProps) => {\n  const [formData, setFormData] = useState<LoginUserDto>({\n    username: '',\n    password: '',\n  });\n\n  const { username, password } = formData;\n  let history = useHistory();\n\n  // Redirect the user to home after successful login\n  useEffect(() => {\n    if (isAuthenticated) {\n      history.push('/');\n    }\n  }, [history, isAuthenticated]);\n\n  const onChange = (\n    e: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>\n  ) =>\n    setFormData({\n      ...formData,\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    loginUser(formData);\n  };\n\n  return (\n    <Fragment>\n      <form className=\"container login-container\" onSubmit={(e) => onSubmit(e)}>\n        <div className=\"field\">\n          <label className=\"label\">Username</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"username\"\n              value={username}\n              type=\"text\"\n              placeholder=\"Username\"\n            />\n          </div>\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\">Password</label>\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              onChange={(e) => onChange(e)}\n              name=\"password\"\n              value={password}\n              type=\"password\"\n              placeholder=\"Enter a password\"\n            />\n          </div>\n        </div>\n\n        <button className=\"button is-success\">Log In</button>\n      </form>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { loginUser })(Login);\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { logoutUser } from '../../actions/auth';\nimport { AppState } from '../../store';\nimport { AuthState } from '../../reducers/auth';\n\ninterface NavbarProps {\n  auth: AuthState;\n  logoutUser: () => void;\n}\n\nconst Navbar = ({ auth: { isAuthenticated }, logoutUser }: NavbarProps) => {\n  let history = useHistory();\n\n  const handleLogout = () => {\n    logoutUser();\n    history.push('/');\n  };\n\n  // Navbar Button & Menu configuration\n  const loggedInButtons = (\n    <Fragment>\n      <a onClick={handleLogout} className=\"button is-danger\">\n        Log Out\n      </a>\n    </Fragment>\n  );\n\n  const guestButtons = (\n    <Fragment>\n      <Link to=\"/login\" className=\"button is-light\">\n        Log in\n      </Link>\n      <Link to=\"/register\" className=\"button is-primary\">\n        <strong>Sign up</strong>\n      </Link>\n    </Fragment>\n  );\n\n  const loggedInMenu = (\n    <Fragment>\n      <Link to=\"/myprofile\" className=\"navbar-item\">\n        My Profile\n      </Link>\n    </Fragment>\n  );\n\n  const dropdownMenu = (\n    <Fragment>\n      <div className=\"navbar-item has-dropdown is-hoverable\">\n        <a className=\"navbar-link\">More</a>\n\n        <div className=\"navbar-dropdown\">\n          <Link to=\"/about\" className=\"navbar-item\">\n            About\n          </Link>\n          <a className=\"navbar-item\">Jobs</a>\n          <a className=\"navbar-item\">Contact</a>\n          <hr className=\"navbar-divider\" />\n          <a className=\"navbar-item\">Report an issue</a>\n        </div>\n      </div>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"navbar-brand\">\n          <a\n            role=\"button\"\n            className=\"navbar-burger burger\"\n            aria-label=\"menu\"\n            aria-expanded=\"false\"\n            data-target=\"navbarBasicExample\"\n          >\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n\n        <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n          <div className=\"navbar-start\">\n            <Link to=\"/\" className=\"navbar-item\">\n              Home\n            </Link>\n\n            <Link to=\"/posts\" className=\"navbar-item\">\n              Posts\n            </Link>\n\n            {isAuthenticated && loggedInMenu}\n\n            {dropdownMenu}\n          </div>\n\n          <div className=\"navbar-end\">\n            <div className=\"navbar-item\">\n              <div className=\"buttons\">\n                {isAuthenticated ? loggedInButtons : guestButtons}\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, { logoutUser })(Navbar);\n","import React, { Fragment } from 'react';\n\ninterface UserStatsProps {\n  // TODO:\n  // Number of posts\n  // Number of liked posts\n  numberOfPosts: number | null;\n  dateRegistered: string | null;\n}\n\nconst UserStats = ({ dateRegistered, numberOfPosts }: UserStatsProps) => {\n  return (\n    <Fragment>\n      <section className=\"info-tiles\">\n        <div className=\"tile is-ancestor has-text-centered\">\n          <div className=\"tile is-parent\">\n            <article className=\"tile is-child box\">\n              <p className=\"title\">{numberOfPosts}</p>\n              <p className=\"subtitle\"># of posts</p>\n            </article>\n          </div>\n          <div className=\"tile is-parent\">\n            <article className=\"tile is-child box\">\n              <p className=\"title\">42</p>\n              <p className=\"subtitle\"># of liked posts</p>\n            </article>\n          </div>\n          <div className=\"tile is-parent\">\n            <article className=\"tile is-child box\">\n              <p className=\"title\">{dateRegistered}</p>\n              <p className=\"subtitle\">Member since</p>\n            </article>\n          </div>\n        </div>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default UserStats;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface UserInfoProps {\n  firstName: string;\n  lastName: string;\n  bio: string;\n}\n\nconst UserInfo = ({ firstName, lastName, bio }: UserInfoProps) => {\n  return (\n    <Fragment>\n      <div className=\"column is-6\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"media-content\">\n              <p className=\"title is-5\">\n                {firstName} {lastName}\n              </p>\n              <Link\n                to={{ pathname: '/edit-bio', state: { bio: bio } }}\n                className=\"subtitle is-6 has-text-info\"\n              >\n                Edit Bio\n              </Link>\n            </div>\n\n            <div className=\"content\">{bio}</div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { User } from '../../reducers/auth';\n\ninterface RecentPostProps {\n  user: User;\n  removeBlogPost: (postId: number) => void;\n}\n\nconst RecentPost = ({ user, removeBlogPost }: RecentPostProps) => {\n  const fiveRecentPosts = user.blogPostsFromUser.slice(0, 6);\n\n  const renderRecentPosts = fiveRecentPosts.map((post) => (\n    <tr key={post.id}>\n      <td width=\"5%\">\n        <i className=\"fas fa-feather-alt\"></i>\n      </td>\n      <td>\n        <Link to={`/post/${post.id}`}>{post.title}</Link>\n      </td>\n      <td className=\"level-right\">\n        <Link\n          to={`/editpost/${post.id}`}\n          className=\"button is-small is-warning post-button profile-post-btn\"\n        >\n          Edit\n        </Link>\n        <button\n          onClick={() => removeBlogPost(post.id)}\n          className=\"button is-small is-danger profile-post-btn\"\n        >\n          Remove\n        </button>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <div className=\"column is-6\">\n      <div className=\"card event-card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">My recent posts</p>\n        </header>\n        <div className=\"card-table\">\n          <div className=\"content\">\n            <table className=\"table is-fullwidth is-striped\">\n              <tbody>{user.blogPostsFromUser && renderRecentPosts}</tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RecentPost;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n// React & Redux\nimport React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// Action Creators\nimport { getUser } from '../../actions/auth';\nimport { removeBlogPost } from '../../actions/blogPost';\nimport './Profile.scss';\n\n// State Management\nimport { AppState } from '../../store';\nimport { User } from '../../reducers/auth';\n\n// Components\nimport UserStats from './UserStats';\nimport UserInfo from './UserInfo';\nimport RecentPost from './RecentPost';\n\ninterface ProfileProps {\n  user: User | null;\n  getUser: () => void;\n  removeBlogPost: (postId: number) => void;\n}\n\nconst Profile = ({ user, getUser, removeBlogPost }: ProfileProps) => {\n  useEffect(() => {\n    getUser();\n  }, [getUser, user]);\n\n  return !user ? null : (\n    <Fragment>\n      <div className=\"container profile-container\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-9\">\n            <section className=\"hero is-info welcome is-small user-hero\">\n              <div className=\"hero-body\">\n                <div className=\"container\">\n                  <h1 className=\"title\">Hello {user.username}</h1>\n                </div>\n              </div>\n            </section>\n\n            <UserStats\n              dateRegistered={user.dateRegistered}\n              numberOfPosts={user.blogPostsFromUser.length}\n            />\n\n            <div className=\"columns\">\n              <RecentPost user={user} removeBlogPost={removeBlogPost} />\n              <UserInfo\n                firstName={user.firstName}\n                lastName={user.lastName}\n                bio={user.bio}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, { getUser, removeBlogPost })(Profile);\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from '../../store';\nimport { Alert } from '../../reducers/alert';\nimport './Alerts.scss';\n\ninterface AlertProps {\n  alerts: Alert[];\n}\n\nconst Alerts = ({ alerts }: AlertProps) => {\n  const displayAlerts = alerts.map((alert) => (\n    <div\n      key={alert.id}\n      className={`container notification is-${alert.type} is-light`}\n    >\n      {alert.msg}\n    </div>\n  ));\n\n  return <Fragment>{alerts && displayAlerts}</Fragment>;\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  alerts: state.alert,\n});\n\nexport default connect(mapStateToProps, {})(Alerts);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PostsMenu = () => {\n  return (\n    <div className=\"column is-3\">\n      <Link to=\"/newpost\" className=\"button is-info is-block is-alt is-large\">\n        New Post\n      </Link>\n      <aside className=\"menu\">\n        <p className=\"menu-label\">Filters</p>\n        <ul className=\"menu-list\">\n          <li>\n            <span className=\"filter-button tag is-link is-large\">Popular</span>\n          </li>\n          <li>\n            <span className=\"filter-button tag is-warning is-large\">\n              Recent\n            </span>\n          </li>\n          <li>\n            <span className=\"filter-button tag is-success is-large\">\n              Rising\n            </span>\n          </li>\n        </ul>\n      </aside>\n    </div>\n  );\n};\n\nexport default PostsMenu;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BlogPost } from '../../reducers/blogPost';\nimport './Post.scss';\nimport { User } from '../../reducers/auth';\n\ninterface PostItemProps {\n  post: BlogPost;\n  user: User | null;\n  removeBlogPost: (postId: number) => void;\n}\n\nconst PostItem = ({ post, user, removeBlogPost }: PostItemProps) => {\n  const loggedInButtons =\n    user && user.username === post.username ? (\n      <div className=\"media-content\">\n        <div className=\"level post-buttons\">\n          <button\n            onClick={() => removeBlogPost(post.id)}\n            className=\"button is-small is-danger level-left\"\n          >\n            Remove\n          </button>\n          <Link\n            to={`/editpost/${post.id}`}\n            className=\"button is-small is-warning level-right\"\n          >\n            Edit\n          </Link>\n        </div>\n      </div>\n    ) : null;\n\n  return (\n    <article className=\"post\">\n      <Link to={`/post/${post.id}`} className=\"title is-4\">\n        {post.title}{' '}\n      </Link>\n      <div className=\"media\">\n        <div className=\"media-content\">\n          <div className=\"content\">\n            <p>\n              <Link to=\"/\" className=\"has-text-black\" href=\"#\">\n                {post.username}\n              </Link>\n            </p>\n          </div>\n        </div>\n        <div className=\"media-right\">\n          {loggedInButtons}\n          <div className=\"media-content\">\n            <p className=\"tag\">{post.datePosted}</p>\n            <span className=\"like-icon has-text-danger\">\n              <i className=\"fas fa-heart\"></i> 2\n            </span>\n            <span className=\"has-text-info\">\n              <i className=\"fa fa-comments\"></i> {post.postComments.length}\n            </span>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default PostItem;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./Post.scss\";\n\n// State Management\nimport { AppState } from \"../../store\";\nimport { BlogPost } from \"../../reducers/blogPost\";\nimport { User } from \"../../reducers/auth\";\n\n// Components\nimport PostsMenu from \"./PostsMenu\";\nimport PostItem from \"./PostItem\";\n\n// Action Creators\nimport {\n  getBlogPostWithQuery,\n  GetPostQuery,\n  getAllBlogPosts,\n} from \"../../actions/blogPost\";\nimport { getUser } from \"../../actions\";\nimport { removeBlogPost } from \"../../actions/blogPost\";\n\ninterface PostsProps extends RouteComponentProps {\n  posts: BlogPost[];\n  user: User | null;\n  getBlogPostWithQuery: (query: GetPostQuery) => void;\n  getAllBlogPosts: () => void;\n  getUser: (showAlert: boolean) => void;\n  removeBlogPost: (postId: number) => void;\n}\n\nconst Posts = ({\n  getBlogPostWithQuery,\n  getAllBlogPosts,\n  getUser,\n  removeBlogPost,\n  posts,\n  user,\n}: PostsProps) => {\n  const [submitSearch, setSubmitSearch] = useState<boolean>(false);\n  const [searchQuery, setSearchQuery] = useState<GetPostQuery>({\n    search: \"\",\n    postId: undefined,\n  });\n\n  // Current user's info is needed to render user sensitive options\n  // such as editing or removing posts\n  useEffect(() => {\n    getUser(false);\n    getAllBlogPosts();\n  }, [getUser, getAllBlogPosts]);\n\n  // Query a search to the backend only when user has finished typing\n  //  the search term\n  useEffect(() => {\n    getBlogPostWithQuery(searchQuery);\n  }, [getBlogPostWithQuery, submitSearch]);\n\n  // Render Methods\n  const renderBlogPostList = posts.map((post) => (\n    <PostItem\n      key={post.id}\n      post={post}\n      user={user}\n      removeBlogPost={removeBlogPost}\n    />\n  ));\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) =>\n    setSearchQuery({\n      ...searchQuery,\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setSubmitSearch(!submitSearch);\n  };\n\n  return (\n    <Fragment>\n      <section className=\"post-container container\">\n        <div className=\"columns\">\n          <PostsMenu />\n\n          <div className=\"column is-9\">\n            <form className=\"searchbar\">\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    name=\"search\"\n                    onChange={(e) => onChange(e)}\n                    type=\"text\"\n                    placeholder=\"Find a repository\"\n                  />\n                </div>\n                <button\n                  onClick={(e) => onSubmit(e)}\n                  type=\"button\"\n                  className=\"button is-info\"\n                >\n                  Search\n                </button>\n              </div>\n            </form>\n\n            <div className=\"box content\">{renderBlogPostList}</div>\n          </div>\n        </div>\n      </section>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  user: state.auth.user,\n  posts: state.blogPost.posts,\n});\n\nexport default connect(mapStateToProps, {\n  getBlogPostWithQuery,\n  getAllBlogPosts,\n  getUser,\n  removeBlogPost,\n})(Posts);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost, CreatePostDto } from '../../actions/blogPost';\nimport './NewPostForm.scss';\nimport { RouteComponentProps } from 'react-router-dom';\n\ninterface NewPostFormProps extends RouteComponentProps {\n  createPost: (newPostData: CreatePostDto, history: any) => void;\n}\n\nconst NewPostForm = ({ createPost, history }: NewPostFormProps) => {\n  const [formData, setFormData] = useState<CreatePostDto>({\n    title: '',\n    content: '',\n  });\n\n  const { title, content } = formData;\n\n  const onChange = (\n    e: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>\n  ) =>\n    setFormData({ ...formData, [e.currentTarget.name]: e.currentTarget.value });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    createPost(formData, history);\n  };\n\n  return (\n    <div className=\"container\">\n      <section className=\"blog-form\">\n        <div className=\"column is-8 is-offset-2\">\n          <div className=\"card article\">\n            <div className=\"card-content\">\n              <div className=\"media\">\n                <div className=\"media-content has-text-centered\">\n                  <p className=\"title article-title\">A New Blog Post</p>\n                </div>\n              </div>\n              <div className=\"content-article-body\">\n                <form onSubmit={(e) => onSubmit(e)}>\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <input\n                        className=\"input is-primary\"\n                        type=\"text\"\n                        name=\"title\"\n                        value={title}\n                        onChange={(e) => onChange(e)}\n                        placeholder=\"Title\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <textarea\n                        className=\"textarea is-primary\"\n                        name=\"content\"\n                        value={content}\n                        onChange={(e) => onChange(e)}\n                        placeholder=\"Your post goes here\"\n                      ></textarea>\n                    </div>\n                  </div>\n                  <button className=\"submit-button button is-primary\">\n                    Submit\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default connect(null, { createPost })(NewPostForm);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createComment, CreateCommentDto } from '../../actions/blogPost';\n\ninterface CreateCommentFormProps {\n  postId: number;\n  createComment: (createCommentDto: CreateCommentDto, postId: number) => void;\n}\n\nconst CreateCommentForm = ({\n  postId,\n  createComment,\n}: CreateCommentFormProps) => {\n  const [formData, setFormData] = useState<CreateCommentDto>({ content: '' });\n\n  const { content } = formData;\n\n  const onChange = (e: React.FormEvent<HTMLTextAreaElement>) =>\n    setFormData({ ...formData, [e.currentTarget.name]: e.currentTarget.value });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    createComment(formData, postId);\n\n    setFormData({ content: '' });\n  };\n\n  return (\n    <div className=\"card article\">\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-content has-text-centered\">\n            <p className=\"title is-4 article-title\">Comments</p>\n          </div>\n        </div>\n        <div className=\"content-article-body\">\n          <form onSubmit={(e) => onSubmit(e)}>\n            <div className=\"field\">\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea is-primary\"\n                  placeholder=\"Leave your comment here\"\n                  name=\"content\"\n                  onChange={(e) => onChange(e)}\n                  value={content}\n                ></textarea>\n              </div>\n            </div>\n            <button className=\"submit-button button is-primary\">\n              Leave a comment\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(null, { createComment })(CreateCommentForm);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { PostComment } from '../../reducers/blogPost';\n\ninterface CommentItemProps {\n  comment: PostComment;\n  postId: number;\n  currUser: string | undefined;\n  removeComment: (commentId: number) => void;\n}\n\nconst CommentItem = ({\n  comment,\n  postId,\n  currUser,\n  removeComment,\n}: CommentItemProps) => {\n  const { content, username } = comment;\n\n  const renderLoggedIn = (\n    <div className=\"level comment-buttons\">\n      <Link\n        to={{\n          pathname: `/edit-comment`,\n          state: {\n            postId: postId,\n            comment: comment,\n          },\n        }}\n        className=\"button is-small is-warning level-right\"\n      >\n        edit\n      </Link>\n      <button\n        onClick={() => removeComment(comment.id)}\n        className=\"button is-small is-danger level-right\"\n      >\n        remove\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"card article\">\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-content\">\n            <p className=\"title is-5\">{username}</p>\n          </div>\n          {currUser === comment.username ? renderLoggedIn : null}\n        </div>\n        <div className=\"content-article-body\">{content}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CommentItem;\n","import React from 'react';\nimport { BlogPost } from '../../reducers/blogPost';\n\ninterface PostContentProps {\n  post: BlogPost;\n}\n\nconst PostContent = ({ post }: PostContentProps) => {\n  return (\n    <div className=\"card article\">\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-content has-text-centered\">\n            <p className=\"title article-title\">{post.title}</p>\n            <p className=\"subtitle is-5\">{post.username}</p>\n          </div>\n        </div>\n        <div className=\"content-article-body\">{post.content}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostContent;\n","// React & Redux\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\n\n// Action Creators\nimport { getBlogPostById, removeComment } from '../../actions/blogPost';\n\n// State Management\nimport { AppState } from '../../store';\nimport { BlogPost } from '../../reducers/blogPost';\n\n// Components\nimport CreateCommentForm from './CreateCommentForm';\nimport CommentItem from './CommentItem';\nimport PostContent from './PostContent';\n\ninterface RouteInfo {\n  id: string;\n}\n\ninterface PostInterface extends RouteComponentProps<RouteInfo> {\n  getBlogPostById: (postId: string) => void;\n  removeComment: (commentId: number) => void;\n  post: BlogPost | null;\n  username: string | undefined;\n}\n\nconst Post = ({\n  getBlogPostById,\n  removeComment,\n  match,\n  post,\n  username,\n}: PostInterface) => {\n  useEffect(() => {\n    // Get the data about the current post from the DB\n    // with the postId\n    const id = match.params.id;\n    getBlogPostById(id);\n  }, [getBlogPostById, match.params.id]);\n\n  const renderComments = post?.postComments.map((comment) => (\n    <CommentItem\n      key={comment.id}\n      comment={comment}\n      postId={post.id}\n      currUser={username}\n      removeComment={removeComment}\n    />\n  ));\n\n  return (\n    post && (\n      <div className=\"container\">\n        <section className=\"post\">\n          <div className=\"column is-8 is-offset-2\">\n            <PostContent post={post} />\n            <CreateCommentForm postId={post.id} />\n          </div>\n          <div className=\"column is-8 is-offset-2\">{renderComments}</div>\n        </section>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  post: state.blogPost.post,\n  username: state.auth.user?.username,\n});\n\nexport default connect(mapStateToProps, { getBlogPostById, removeComment })(\n  Post\n);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  updateBlogPost,\n  UpdatePostDto,\n  getBlogPostById,\n} from '../../actions/blogPost';\nimport './EditPostForm.scss';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { BlogPost } from '../../reducers/blogPost';\nimport { AppState } from '../../store';\n\ninterface RouteInfo {\n  postId: string;\n}\n\ninterface NewPostFormProps extends RouteComponentProps<RouteInfo> {\n  post: BlogPost | null;\n  updateBlogPost: (updatePostDto: UpdatePostDto, postId: string) => void;\n  getBlogPostById: (postId: string) => void;\n}\n\nconst NewPostForm = ({\n  updateBlogPost,\n  getBlogPostById,\n  post,\n  match,\n}: NewPostFormProps) => {\n  const [formData, setFormData] = useState<UpdatePostDto>({\n    title: '',\n    content: '',\n  });\n\n  // ID of the post coming from URL\n  const postId: string = match.params.postId;\n\n  // Get the post that needs to be udpated\n  useEffect(() => {\n    getBlogPostById(postId);\n  }, [getBlogPostById, postId]);\n\n  // Fill the form with blogPost data\n  useEffect(() => {\n    if (post !== null) {\n      setFormData({ title: post.title, content: post.content });\n    }\n  }, [post]);\n\n  const { title, content } = formData;\n\n  const onChange = (\n    e: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>\n  ) =>\n    setFormData({ ...formData, [e.currentTarget.name]: e.currentTarget.value });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    updateBlogPost(formData, postId);\n  };\n\n  return (\n    post && (\n      <div className=\"container\">\n        <section className=\"blog-form\">\n          <div className=\"column is-8 is-offset-2\">\n            <div className=\"card article\">\n              <div className=\"card-content\">\n                <div className=\"media\">\n                  <div className=\"media-content has-text-centered\">\n                    <p className=\"title article-title\">Edit Post</p>\n                  </div>\n                </div>\n                <div className=\"content-article-body\">\n                  <form onSubmit={(e) => onSubmit(e)}>\n                    <div className=\"field\">\n                      <div className=\"control\">\n                        <input\n                          className=\"input is-primary\"\n                          type=\"text\"\n                          name=\"title\"\n                          value={title}\n                          onChange={(e) => onChange(e)}\n                          placeholder=\"Title\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"field\">\n                      <div className=\"control\">\n                        <textarea\n                          className=\"textarea is-primary\"\n                          name=\"content\"\n                          value={content}\n                          onChange={(e) => onChange(e)}\n                          placeholder=\"Your post goes here\"\n                        ></textarea>\n                      </div>\n                    </div>\n                    <button className=\"submit-button button is-primary\">\n                      Submit\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  post: state.blogPost.post,\n});\n\nexport default connect(mapStateToProps, { updateBlogPost, getBlogPostById })(\n  NewPostForm\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteProps, Redirect, Route } from 'react-router-dom';\nimport { getUser } from '../../actions';\nimport { AppState } from '../../store';\n\ninterface PrivateRouteProps extends RouteProps {\n  compoment: React.FC<any>;\n  path: string;\n  exact: boolean;\n\n  getUser: () => void;\n  isAuthenticated: boolean;\n}\n\nconst PrivateRoute = ({\n  compoment,\n  path,\n  exact,\n  getUser,\n  isAuthenticated,\n}: PrivateRouteProps) => {\n  useEffect(() => {\n    getUser();\n  }, [getUser]);\n\n  return isAuthenticated ? (\n    <Route path={path} exact={exact} component={compoment} />\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { getUser })(PrivateRoute);\n","import React from 'react';\nimport './Landing.scss';\n\nconst Landing = () => {\n  return (\n    <div>\n      <img className=\"landing\" src={require('./landing.jpg')} alt=\"landing \" />\n    </div>\n  );\n};\n\nexport default Landing;\n","/* eslint-disable react-hooks/exhaustive-deps */\n// React & Redux\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\n// Action Creators\nimport { editComment } from \"../../actions/blogPost\";\n\n// State Management\nimport { PostComment } from \"../../reducers/blogPost\";\nimport { EditPostCommentDto } from \"../../actions/blogPost\";\n\ninterface LocationState {\n  postId: number;\n  comment: PostComment;\n}\n\ninterface EditCommentFormProps\n  extends RouteComponentProps<{}, {}, LocationState> {\n  editComment: (\n    editCommentDto: EditPostCommentDto,\n    postId: number,\n    commentId: number\n  ) => void;\n}\n\nconst EditCommentForm = ({ location, editComment }: EditCommentFormProps) => {\n  const { postId, comment } = location.state;\n\n  const [formData, setFormData] = useState<EditPostCommentDto>({\n    content: \"\",\n  });\n\n  useEffect(() => {\n    setFormData({ content: comment.content });\n  }, []);\n\n  const { content } = formData;\n\n  const onChange = (e: React.FormEvent<HTMLTextAreaElement>) =>\n    setFormData({ ...formData, [e.currentTarget.name]: e.currentTarget.value });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    editComment(formData, postId, comment.id);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card article\">\n        <div className=\"card-content\">\n          <div className=\"media\">\n            <div className=\"media-content has-text-centered\">\n              <p className=\"title is-4 article-title\">Edit Comment</p>\n            </div>\n          </div>\n          <div className=\"content-article-body\">\n            <form onSubmit={(e) => onSubmit(e)}>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <textarea\n                    className=\"textarea is-primary\"\n                    placeholder=\"Leave your comment here\"\n                    onChange={(e) => onChange(e)}\n                    value={content}\n                    name=\"content\"\n                  ></textarea>\n                </div>\n              </div>\n              <button className=\"submit-button button is-primary\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(null, { editComment })(EditCommentForm);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editBio } from \"../../actions/auth\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { EditBioDto } from \"../../actions\";\n\ninterface LocationProp {\n  bio: string;\n}\n\ninterface EditBioForm extends RouteComponentProps<{}, {}, LocationProp> {\n  editBio: (editBioDto: EditBioDto) => void;\n}\n\nconst EditBioForm = ({ location: { state }, editBio }: EditBioForm) => {\n  const [formData, setFormData] = useState({ bio: \"\" });\n\n  useEffect(() => {\n    setFormData({ bio: state.bio });\n  }, []);\n\n  const { bio } = formData;\n\n  const onChange = (e: React.FormEvent<HTMLTextAreaElement>) =>\n    setFormData({ bio: e.currentTarget.value });\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    editBio(formData);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card article\">\n        <div className=\"card-content\">\n          <div className=\"media\">\n            <div className=\"media-content has-text-centered\">\n              <p className=\"title is-4 article-title\">Edit Bio</p>\n            </div>\n          </div>\n          <div className=\"content-article-body\">\n            <form onSubmit={(e) => onSubmit(e)}>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <textarea\n                    className=\"textarea is-primary\"\n                    placeholder=\"Leave your comment here\"\n                    value={bio}\n                    onChange={(e) => onChange(e)}\n                    name=\"content\"\n                  ></textarea>\n                </div>\n              </div>\n              <button className=\"submit-button button is-primary\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(null, { editBio })(EditBioForm);\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// REDUX\nimport { configureStore } from './store';\nimport { Provider } from 'react-redux';\nimport './App.scss';\n\n// COMPONENTS\nimport Register from './components/forms/Register';\nimport Login from './components/forms/Login';\nimport Navbar from './components/layout/Navbar';\nimport Profile from './components/profile/Profile';\nimport Alerts from './components/alert/Alerts';\nimport Posts from './components/posts/Posts';\nimport NewPostForm from './components/forms/NewPostForm';\nimport Post from './components/post/Post';\nimport { setAuthToken } from './utils/axiosConfig';\nimport { getUser } from './actions';\nimport EditPostForm from './components/forms/EditPostForm';\nimport PrivateRoute from './components/routes/PrivateRoute';\nimport Landing from './components/layout/Landing';\nimport EditCommentForm from './components/post/EditCommentForm';\nimport EditBioForm from './components/forms/EditBioForm';\n\nconst store = configureStore();\n\n// Set auth token for axios\nsetAuthToken(localStorage.token);\n\nfunction App() {\n  useEffect(() => {\n    // Immeidately authenticate the user if an authorized token exists\n    if (localStorage.token) {\n      store.dispatch<any>(getUser(false));\n    }\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Navbar />\n        <Alerts />\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/posts\" component={Posts} />\n          <Route exact path=\"/post/:id\" component={Post} />\n\n          <PrivateRoute exact path=\"/myprofile\" compoment={Profile} />\n          <PrivateRoute exact path=\"/newpost\" compoment={NewPostForm} />\n          <PrivateRoute\n            exact\n            path=\"/editpost/:postId\"\n            compoment={EditPostForm}\n          />\n          <PrivateRoute\n            exact\n            path=\"/edit-comment\"\n            compoment={EditCommentForm}\n          />\n\n          <PrivateRoute exact path=\"/edit-bio\" compoment={EditBioForm} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}